import { Emitter } from '@theia/core/lib/common/event';
import { CancellationToken, CancellationTokenSource } from '@theia/core/lib/common/cancellation';
import { HostedPluginSupport } from '@theia/plugin-ext/lib/hosted/browser/hosted-plugin';
import { VSXExtension, VSXExtensionFactory } from './vsx-extension';
import { ProgressService } from '@theia/core/lib/common/progress-service';
import { VSXExtensionsSearchModel } from './vsx-extensions-search-model';
import { Deferred } from '@theia/core/lib/common/promise-util';
import { PreferenceInspectionScope, PreferenceService } from '@theia/core/lib/browser';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { RecommendedExtensions } from './recommended-extensions/recommended-extensions-preference-contribution';
import URI from '@theia/core/lib/common/uri';
import { VSXSearchParam } from '@theia/ovsx-client/lib/ovsx-types';
import { OVSXClientProvider } from '../common/ovsx-client-provider';
export declare class VSXExtensionsModel {
    protected readonly onDidChangeEmitter: Emitter<void>;
    readonly onDidChange: import("@theia/core/lib/common/event").Event<void>;
    protected clientProvider: OVSXClientProvider;
    protected readonly pluginSupport: HostedPluginSupport;
    protected readonly extensionFactory: VSXExtensionFactory;
    protected readonly progressService: ProgressService;
    protected readonly preferences: PreferenceService;
    protected readonly workspaceService: WorkspaceService;
    readonly search: VSXExtensionsSearchModel;
    protected readonly initialized: Deferred<void>;
    protected init(): Promise<void>;
    protected initInstalled(): Promise<void>;
    protected initSearchResult(): Promise<void>;
    protected initRecommended(): Promise<void>;
    /**
     * single source of all extensions
     */
    protected readonly extensions: Map<string, VSXExtension>;
    protected _installed: Set<string>;
    get installed(): IterableIterator<string>;
    isInstalled(id: string): boolean;
    protected _searchError?: string;
    get searchError(): string | undefined;
    protected _searchResult: Set<string>;
    get searchResult(): IterableIterator<string>;
    protected _recommended: Set<string>;
    get recommended(): IterableIterator<string>;
    getExtension(id: string): VSXExtension | undefined;
    protected setExtension(id: string): VSXExtension;
    protected doChange<T>(task: () => Promise<T>): Promise<T>;
    protected doChange<T>(task: () => Promise<T>, token: CancellationToken): Promise<T | undefined>;
    protected searchCancellationTokenSource: CancellationTokenSource;
    protected updateSearchResult: () => Promise<void>;
    protected doUpdateSearchResult(param: VSXSearchParam, token: CancellationToken): Promise<void>;
    protected updateInstalled(): Promise<void>;
    protected updateRecommended(): Promise<Array<VSXExtension | undefined>>;
    protected getRecommendationsForScope(scope: PreferenceInspectionScope, root?: URI): Required<RecommendedExtensions>;
    resolve(id: string): Promise<VSXExtension>;
    protected compileReadme(readmeMarkdown: string): string;
    protected refresh(id: string, version?: string): Promise<VSXExtension | undefined>;
    /**
     * Determines if the given extension should be refreshed.
     * @param extension the extension to refresh.
     */
    protected shouldRefresh(extension?: VSXExtension): boolean;
    protected onDidFailRefresh(id: string, error: unknown): VSXExtension | undefined;
    /**
     * Compare two extensions based on their display name, and publisher if applicable.
     * @param a the first extension id for comparison.
     * @param b the second extension id for comparison.
     */
    protected compareExtensions(a: string, b: string): number;
}
//# sourceMappingURL=vsx-extensions-model.d.ts.map