import { Range } from '../core/range';
export interface ILinesDiffComputer {
    computeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions): ILinesDiff;
}
export interface ILinesDiffComputerOptions {
    ignoreTrimWhitespace: boolean;
    maxComputationTime: number;
}
export interface ILinesDiff {
    readonly quitEarly: boolean;
    readonly changes: LineRangeMapping[];
}
export declare class LineRangeMapping {
    readonly originalRange: LineRange;
    readonly modifiedRange: LineRange;
    /**
     * Meaning of `undefined` unclear.
    */
    readonly innerChanges: RangeMapping[] | undefined;
    constructor(originalRange: LineRange, modifiedRange: LineRange, 
    /**
     * Meaning of `undefined` unclear.
    */
    innerChanges: RangeMapping[] | undefined);
    toString(): string;
}
export declare class RangeMapping {
    readonly originalRange: Range;
    readonly modifiedRange: Range;
    constructor(originalRange: Range, modifiedRange: Range);
    toString(): string;
}
/**
 * 1-based.
*/
export declare class LineRange {
    readonly startLineNumber: number;
    readonly endLineNumberExclusive: number;
    constructor(startLineNumber: number, endLineNumberExclusive: number);
    get isEmpty(): boolean;
    delta(offset: number): LineRange;
    get length(): number;
    toString(): string;
    join(other: LineRange): LineRange;
}
//# sourceMappingURL=linesDiffComputer.d.ts.map