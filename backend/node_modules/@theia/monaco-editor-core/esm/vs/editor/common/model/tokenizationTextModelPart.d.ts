import { Event } from '../../../base/common/event';
import { IPosition } from '../core/position';
import { IRange, Range } from '../core/range';
import { IWordAtPosition } from '../core/wordHelper';
import { StandardTokenType } from '../encodedTokenAttributes';
import { ILanguageService } from '../languages/language';
import { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry';
import { TextModel } from './textModel';
import { TextModelPart } from './textModelPart';
import { IModelContentChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelTokensChangedEvent } from '../textModelEvents';
import { ContiguousMultilineTokens } from '../tokens/contiguousMultilineTokens';
import { LineTokens } from '../tokens/lineTokens';
import { SparseMultilineTokens } from '../tokens/sparseMultilineTokens';
import { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl';
import { BackgroundTokenizationState, ITokenizationTextModelPart } from '../tokenizationTextModelPart';
export declare class TokenizationTextModelPart extends TextModelPart implements ITokenizationTextModelPart {
    private readonly _languageService;
    private readonly _languageConfigurationService;
    private readonly _textModel;
    private readonly bracketPairsTextModelPart;
    private _languageId;
    private readonly _onDidChangeLanguage;
    readonly onDidChangeLanguage: Event<IModelLanguageChangedEvent>;
    private readonly _onDidChangeLanguageConfiguration;
    readonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent>;
    private readonly _onDidChangeTokens;
    readonly onDidChangeTokens: Event<IModelTokensChangedEvent>;
    private readonly _languageRegistryListener;
    private readonly _tokens;
    private readonly _semanticTokens;
    private readonly _tokenization;
    constructor(_languageService: ILanguageService, _languageConfigurationService: ILanguageConfigurationService, _textModel: TextModel, bracketPairsTextModelPart: BracketPairsTextModelPart, _languageId: string);
    _hasListeners(): boolean;
    acceptEdit(range: IRange, text: string, eolCount: number, firstLineLength: number, lastLineLength: number): void;
    handleDidChangeAttached(): void;
    flush(): void;
    handleDidChangeContent(change: IModelContentChangedEvent): void;
    dispose(): void;
    private _backgroundTokenizationState;
    get backgroundTokenizationState(): BackgroundTokenizationState;
    private handleTokenizationProgress;
    private readonly _onBackgroundTokenizationStateChanged;
    readonly onBackgroundTokenizationStateChanged: Event<void>;
    setLineTokens(lineNumber: number, tokens: Uint32Array | ArrayBuffer | null): void;
    setTokens(tokens: ContiguousMultilineTokens[], backgroundTokenizationCompleted?: boolean): void;
    setSemanticTokens(tokens: SparseMultilineTokens[] | null, isComplete: boolean): void;
    hasCompleteSemanticTokens(): boolean;
    hasSomeSemanticTokens(): boolean;
    setPartialSemanticTokens(range: Range, tokens: SparseMultilineTokens[]): void;
    tokenizeViewport(startLineNumber: number, endLineNumber: number): void;
    clearTokens(): void;
    clearSemanticTokens(): void;
    private _emitModelTokensChangedEvent;
    resetTokenization(): void;
    forceTokenization(lineNumber: number): void;
    isCheapToTokenize(lineNumber: number): boolean;
    tokenizeIfCheap(lineNumber: number): void;
    getLineTokens(lineNumber: number): LineTokens;
    private _getLineTokens;
    getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;
    tokenizeLineWithEdit(position: IPosition, length: number, newText: string): LineTokens | null;
    private getLanguageConfiguration;
    getWordAtPosition(_position: IPosition): IWordAtPosition | null;
    private static _findLanguageBoundaries;
    getWordUntilPosition(position: IPosition): IWordAtPosition;
    getLanguageId(): string;
    getLanguageIdAtPosition(lineNumber: number, column: number): string;
    setLanguageId(languageId: string, source?: string): void;
}
//# sourceMappingURL=tokenizationTextModelPart.d.ts.map