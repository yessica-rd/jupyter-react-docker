import '../../../../base/browser/ui/codicons/codiconStyles';
import { IAnchor } from '../../../../base/browser/ui/contextview/contextview';
import { Disposable } from '../../../../base/common/lifecycle';
import './codeActionWidget.css';
import { CodeActionItem, CodeActionSet } from './codeAction';
import { CodeActionTrigger } from './types';
import '../../symbolIcons/browser/symbolIcons';
import { ICommandService } from '../../../../platform/commands/common/commands';
import { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';
import { IContextViewService } from '../../../../platform/contextview/browser/contextView';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
import { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';
export declare const Context: {
    Visible: RawContextKey<boolean>;
};
export declare const acceptSelectedCodeActionCommand = "acceptSelectedCodeAction";
export declare const previewSelectedCodeActionCommand = "previewSelectedCodeAction";
interface CodeActionWidgetDelegate {
    onSelectCodeAction(action: CodeActionItem, trigger: CodeActionTrigger, options: {
        readonly preview: boolean;
    }): Promise<any>;
    onHide(cancelled: boolean): void;
}
export interface CodeActionShowOptions {
    readonly includeDisabledActions: boolean;
    readonly fromLightbulb?: boolean;
    readonly showHeaders?: boolean;
}
export declare class CodeActionWidget extends Disposable {
    private readonly _commandService;
    private readonly _contextViewService;
    private readonly _keybindingService;
    private readonly _telemetryService;
    private static _instance?;
    static get INSTANCE(): CodeActionWidget | undefined;
    static getOrCreateInstance(instantiationService: IInstantiationService): CodeActionWidget;
    private readonly codeActionList;
    private currentShowingContext?;
    constructor(_commandService: ICommandService, _contextViewService: IContextViewService, _keybindingService: IKeybindingService, _telemetryService: ITelemetryService);
    get isVisible(): boolean;
    show(trigger: CodeActionTrigger, codeActions: CodeActionSet, anchor: IAnchor, container: HTMLElement | undefined, options: CodeActionShowOptions, delegate: CodeActionWidgetDelegate, contextKeyService: IContextKeyService): Promise<void>;
    focusPrevious(): void;
    focusNext(): void;
    acceptSelected(options?: {
        readonly preview?: boolean;
    }): void;
    hide(): void;
    private renderWidget;
    /**
     * Toggles whether the disabled actions in the code action widget are visible or not.
     */
    private toggleShowDisabled;
    private onWidgetClosed;
    private createActionBar;
    private getActionBarActions;
}
export {};
//# sourceMappingURL=codeActionWidget.d.ts.map