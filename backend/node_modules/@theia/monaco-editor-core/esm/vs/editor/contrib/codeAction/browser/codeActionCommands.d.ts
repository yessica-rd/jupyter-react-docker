import { IAnchor } from '../../../../base/browser/ui/contextview/contextview';
import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { EditorAction, EditorCommand, ServicesAccessor } from '../../../browser/editorExtensions';
import { IPosition } from '../../../common/core/position';
import { IEditorContribution } from '../../../common/editorCommon';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { CodeActionItem, CodeActionSet } from './codeAction';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IMarkerService } from '../../../../platform/markers/common/markers';
import { IEditorProgressService } from '../../../../platform/progress/common/progress';
import { CodeActionAutoApply, CodeActionFilter, CodeActionTrigger, CodeActionTriggerSource } from './types';
export declare class CodeActionController extends Disposable implements IEditorContribution {
    private readonly _instantiationService;
    static readonly ID = "editor.contrib.codeActionController";
    static get(editor: ICodeEditor): CodeActionController | null;
    private readonly _editor;
    private readonly _model;
    private readonly _ui;
    constructor(editor: ICodeEditor, markerService: IMarkerService, contextKeyService: IContextKeyService, progressService: IEditorProgressService, _instantiationService: IInstantiationService, languageFeaturesService: ILanguageFeaturesService);
    private update;
    showCodeActions(trigger: CodeActionTrigger, actions: CodeActionSet, at: IAnchor | IPosition): Promise<void>;
    manualTriggerAtCurrentPosition(notAvailableMessage: string, triggerAction: CodeActionTriggerSource, filter?: CodeActionFilter, autoApply?: CodeActionAutoApply, preview?: boolean): void;
    private _trigger;
    private _applyCodeAction;
}
export declare enum ApplyCodeActionReason {
    OnSave = "onSave",
    FromProblemsView = "fromProblemsView",
    FromCodeActions = "fromCodeActions"
}
export declare function applyCodeAction(accessor: ServicesAccessor, item: CodeActionItem, codeActionReason: ApplyCodeActionReason, options?: {
    preview?: boolean;
    editor?: ICodeEditor;
}): Promise<void>;
export declare class QuickFixAction extends EditorAction {
    static readonly Id = "editor.action.quickFix";
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor): void;
}
export declare class CodeActionCommand extends EditorCommand {
    constructor();
    runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void;
}
export declare class RefactorAction extends EditorAction {
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void;
}
export declare class RefactorPreview extends EditorAction {
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void;
}
export declare class SourceAction extends EditorAction {
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void;
}
export declare class OrganizeImportsAction extends EditorAction {
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor): void;
}
export declare class FixAllAction extends EditorAction {
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor): void;
}
export declare class AutoFixAction extends EditorAction {
    static readonly Id = "editor.action.autoFix";
    constructor();
    run(_accessor: ServicesAccessor, editor: ICodeEditor): void;
}
//# sourceMappingURL=codeActionCommands.d.ts.map