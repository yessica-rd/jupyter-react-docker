import { HoverPosition } from '../hover/hoverWidget';
import { IUpdatableHoverOptions } from './iconLabelHover';
import { IMarkdownString } from '../../../common/htmlContent';
import { IDisposable } from '../../../common/lifecycle';
export interface IHoverDelegateTarget extends IDisposable {
    readonly targetElements: readonly HTMLElement[];
    x?: number;
}
export interface IHoverDelegateOptions extends IUpdatableHoverOptions {
    content: IMarkdownString | string | HTMLElement;
    target: IHoverDelegateTarget | HTMLElement;
    hoverPosition?: HoverPosition;
    showPointer?: boolean;
    skipFadeInAnimation?: boolean;
}
export interface IHoverDelegate {
    showHover(options: IHoverDelegateOptions, focus?: boolean): IHoverWidget | undefined;
    onDidHideHover?: () => void;
    delay: number;
    placement?: 'mouse' | 'element';
}
export interface IHoverWidget extends IDisposable {
    readonly isDisposed: boolean;
}
//# sourceMappingURL=iconHoverDelegate.d.ts.map