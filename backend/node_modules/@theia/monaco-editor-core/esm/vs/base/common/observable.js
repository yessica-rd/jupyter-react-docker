"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.autorunWithStore = exports.autorunHandleChanges = exports.autorunDelta = exports.autorun = exports.derived = exports.transaction = exports.observableValue = void 0;
var base_1 = require("./observableImpl/base");
Object.defineProperty(exports, "observableValue", { enumerable: true, get: function () { return base_1.observableValue; } });
Object.defineProperty(exports, "transaction", { enumerable: true, get: function () { return base_1.transaction; } });
var derived_1 = require("./observableImpl/derived");
Object.defineProperty(exports, "derived", { enumerable: true, get: function () { return derived_1.derived; } });
var autorun_1 = require("./observableImpl/autorun");
Object.defineProperty(exports, "autorun", { enumerable: true, get: function () { return autorun_1.autorun; } });
Object.defineProperty(exports, "autorunDelta", { enumerable: true, get: function () { return autorun_1.autorunDelta; } });
Object.defineProperty(exports, "autorunHandleChanges", { enumerable: true, get: function () { return autorun_1.autorunHandleChanges; } });
Object.defineProperty(exports, "autorunWithStore", { enumerable: true, get: function () { return autorun_1.autorunWithStore; } });
__exportStar(require("./observableImpl/utils"), exports);
const logging_1 = require("./observableImpl/logging");
const enableLogging = false;
if (enableLogging) {
    (0, logging_1.setLogger)(new logging_1.ConsoleObservableLogger());
}
//# sourceMappingURL=observable.js.map