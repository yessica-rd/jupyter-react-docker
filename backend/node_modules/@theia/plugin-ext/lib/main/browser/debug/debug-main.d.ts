import { interfaces } from '@theia/core/shared/inversify';
import { RPCProtocol } from '../../../common/rpc-protocol';
import { DebugConfigurationProviderDescriptor, DebugMain } from '../../../common/plugin-api-rpc';
import { Breakpoint, WorkspaceFolder } from '../../../common/plugin-api-rpc-model';
import { DebugConfiguration, DebugSessionOptions } from '@theia/debug/lib/common/debug-configuration';
import { DebuggerDescription } from '@theia/debug/lib/common/debug-service';
import { DebugProtocol } from '@vscode/debugprotocol';
import { Disposable } from '@theia/core/lib/common/disposable';
import { ConnectionImpl } from '../../../common/connection';
export declare class DebugMainImpl implements DebugMain, Disposable {
    readonly connectionMain: ConnectionImpl;
    private readonly debugExt;
    private readonly sessionManager;
    private readonly labelProvider;
    private readonly editorManager;
    private readonly breakpointsManager;
    private readonly consoleSessionManager;
    private readonly configurationManager;
    private readonly terminalService;
    private readonly messages;
    private readonly outputChannelManager;
    private readonly debugPreferences;
    private readonly sessionContributionRegistrator;
    private readonly pluginDebugService;
    private readonly fileService;
    private readonly pluginService;
    private readonly debugContributionProvider;
    private readonly workspaceService;
    private readonly debuggerContributions;
    private readonly configurationProviders;
    private readonly toDispose;
    constructor(rpc: RPCProtocol, connectionMain: ConnectionImpl, container: interfaces.Container);
    dispose(): void;
    $appendToDebugConsole(value: string): Promise<void>;
    $appendLineToDebugConsole(value: string): Promise<void>;
    $registerDebuggerContribution(description: DebuggerDescription): Promise<void>;
    $unregisterDebuggerConfiguration(debugType: string): Promise<void>;
    $registerDebugConfigurationProvider(description: DebugConfigurationProviderDescriptor): void;
    $unregisterDebugConfigurationProvider(handle: number): Promise<void>;
    $addBreakpoints(breakpoints: Breakpoint[]): Promise<void>;
    $getDebugProtocolBreakpoint(sessionId: string, breakpointId: string): Promise<DebugProtocol.Breakpoint | undefined>;
    $removeBreakpoints(breakpoints: string[]): Promise<void>;
    $customRequest(sessionId: string, command: string, args?: any): Promise<DebugProtocol.Response>;
    $startDebugging(folder: WorkspaceFolder | undefined, nameOrConfiguration: string | DebugConfiguration, options: DebugSessionOptions): Promise<boolean>;
    $stopDebugging(sessionId?: string): Promise<void>;
    private toTheiaPluginApiBreakpoints;
    private toTheiaPluginApiBreakpoint;
}
//# sourceMappingURL=debug-main.d.ts.map