import { TasksExt, TaskDto, TaskExecutionDto } from '../../common/plugin-api-rpc';
import * as theia from '@theia/plugin';
import { RPCProtocol } from '../../common/rpc-protocol';
import { Event } from '@theia/core/lib/common/event';
import { TerminalServiceExtImpl } from '../terminal-ext';
declare type ExecutionCallback = (resolvedDefinition: theia.TaskDefinition) => Thenable<theia.Pseudoterminal>;
export declare class TasksExtImpl implements TasksExt {
    readonly terminalExt: TerminalServiceExtImpl;
    private proxy;
    private callId;
    private adaptersMap;
    private executions;
    protected callbackIdBase: string;
    protected callbackId: number;
    protected customExecutionIds: Map<ExecutionCallback, string>;
    protected customExecutionFunctions: Map<string, ExecutionCallback>;
    protected lastStartedTask: number | undefined;
    private readonly onDidExecuteTask;
    private readonly onDidTerminateTask;
    private readonly onDidExecuteTaskProcess;
    private readonly onDidTerminateTaskProcess;
    constructor(rpc: RPCProtocol, terminalExt: TerminalServiceExtImpl);
    get taskExecutions(): ReadonlyArray<theia.TaskExecution>;
    get onDidStartTask(): Event<theia.TaskStartEvent>;
    $onDidStartTask(execution: TaskExecutionDto, terminalId: number): Promise<void>;
    get onDidEndTask(): Event<theia.TaskEndEvent>;
    $onDidEndTask(id: number): void;
    get onDidStartTaskProcess(): Event<theia.TaskProcessStartEvent>;
    $onDidStartTaskProcess(processId: number, executionDto: TaskExecutionDto): void;
    get onDidEndTaskProcess(): Event<theia.TaskProcessEndEvent>;
    $onDidEndTaskProcess(exitCode: number, taskId: number): void;
    registerTaskProvider(type: string, provider: theia.TaskProvider): theia.Disposable;
    fetchTasks(filter?: theia.TaskFilter): Promise<theia.Task[]>;
    executeTask(task: theia.Task): Promise<theia.TaskExecution>;
    $provideTasks(handle: number): Promise<TaskDto[] | undefined>;
    $resolveTask(handle: number, task: TaskDto, token: theia.CancellationToken): Promise<TaskDto | undefined>;
    private addNewAdapter;
    private nextCallId;
    private createDisposable;
    $initLoadedTasks(taskExecutions: TaskExecutionDto[]): Promise<void>;
    private getTaskExecution;
    private addCustomExecution;
    private nextCallbackId;
}
export {};
//# sourceMappingURL=tasks.d.ts.map