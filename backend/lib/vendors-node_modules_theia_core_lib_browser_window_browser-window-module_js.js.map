{"version":3,"file":"vendors-node_modules_theia_core_lib_browser_window_browser-window-module_js.js","mappings":"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","sources":["webpack:///./node_modules/@theia/core/src/browser/browser-clipboard-service.ts?","webpack:///./node_modules/@theia/core/src/browser/window/browser-window-module.ts?","webpack:///./node_modules/@theia/core/src/browser/window/default-secondary-window-service.ts?","webpack:///./node_modules/@theia/core/src/browser/window/default-window-service.ts?","webpack:///./node_modules/@theia/core/src/common/window.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2019 RedHat and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject } from 'inversify';\nimport { isFirefox } from './browser';\nimport { ClipboardService } from './clipboard-service';\nimport { ILogger } from '../common/logger';\nimport { MessageService } from '../common/message-service';\n\nexport interface NavigatorClipboard {\n    readText(): Promise<string>;\n    writeText(value: string): Promise<void>;\n}\nexport interface PermissionStatus {\n    state: 'granted' | 'prompt' | 'denied'\n}\nexport interface NavigatorPermissions {\n    query(options: { name: string }): Promise<PermissionStatus>\n}\n\n@injectable()\nexport class BrowserClipboardService implements ClipboardService {\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    async readText(): Promise<string> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-read');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-read permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                return await this.getClipboardAPI().readText();\n            } catch (e2) {\n                this.logger.error('Failed reading clipboard content.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return '';\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return '';\n        }\n        return this.getClipboardAPI().readText();\n    }\n\n    async writeText(value: string): Promise<void> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-write');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-write permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                await this.getClipboardAPI().writeText(value);\n                return;\n            } catch (e2) {\n                this.logger.error('Failed writing to the clipboard.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return;\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return;\n        }\n        return this.getClipboardAPI().writeText(value);\n    }\n\n    protected async queryPermission(name: string): Promise<PermissionStatus> {\n        if ('permissions' in navigator) {\n            return (<NavigatorPermissions>navigator['permissions']).query({ name: name });\n        }\n        throw new Error('Permissions API unavailable');\n    }\n\n    protected getClipboardAPI(): NavigatorClipboard {\n        if ('clipboard' in navigator) {\n            return (<NavigatorClipboard>navigator['clipboard']);\n        }\n        throw new Error('Async Clipboard API unavailable');\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { ContainerModule } from 'inversify';\nimport { WindowService } from '../../browser/window/window-service';\nimport { DefaultWindowService } from '../../browser/window/default-window-service';\nimport { FrontendApplicationContribution } from '../frontend-application';\nimport { ClipboardService } from '../clipboard-service';\nimport { BrowserClipboardService } from '../browser-clipboard-service';\nimport { SecondaryWindowService } from './secondary-window-service';\nimport { DefaultSecondaryWindowService } from './default-secondary-window-service';\n\nexport default new ContainerModule(bind => {\n    bind(DefaultWindowService).toSelf().inSingletonScope();\n    bind(WindowService).toService(DefaultWindowService);\n    bind(FrontendApplicationContribution).toService(DefaultWindowService);\n    bind(ClipboardService).to(BrowserClipboardService).inSingletonScope();\n    bind(SecondaryWindowService).to(DefaultSecondaryWindowService).inSingletonScope();\n});\n","// *****************************************************************************\n// Copyright (C) 2022 STMicroelectronics, Ericsson, ARM, EclipseSource and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { SecondaryWindowService } from './secondary-window-service';\nimport { WindowService } from './window-service';\n\n@injectable()\nexport class DefaultSecondaryWindowService implements SecondaryWindowService {\n    // secondary-window.html is part of Theia's generated code. It is generated by dev-packages/application-manager/src/generator/frontend-generator.ts\n    protected static SECONDARY_WINDOW_URL = 'secondary-window.html';\n\n    /**\n     * Randomized prefix to be included in opened windows' ids.\n     * This avoids conflicts when creating sub-windows from multiple theia instances (e.g. by opening Theia multiple times in the same browser)\n     */\n    protected readonly prefix = crypto.getRandomValues(new Uint32Array(1))[0];\n    /** Unique id. Increase after every access. */\n    private nextId = 0;\n\n    protected secondaryWindows: Window[] = [];\n\n    @inject(WindowService)\n    protected readonly windowService: WindowService;\n\n    @postConstruct()\n    init(): void {\n        // Close all open windows when the main window is closed.\n        this.windowService.onUnload(() => {\n            // Iterate backwards because calling window.close might remove the window from the array\n            for (let i = this.secondaryWindows.length - 1; i >= 0; i--) {\n                this.secondaryWindows[i].close();\n            }\n        });\n    }\n\n    createSecondaryWindow(onClose?: (closedWin: Window) => void): Window | undefined {\n        const win = this.doCreateSecondaryWindow(onClose);\n        if (win) {\n            this.secondaryWindows.push(win);\n        }\n        return win;\n    }\n\n    protected doCreateSecondaryWindow(onClose?: (closedWin: Window) => void): Window | undefined {\n        const win = window.open(DefaultSecondaryWindowService.SECONDARY_WINDOW_URL, this.nextWindowId(), 'popup');\n        if (win) {\n            // Add the unload listener after the dom content was loaded because otherwise the unload listener is called already on open in some browsers (e.g. Chrome).\n            win.addEventListener('DOMContentLoaded', () => {\n                win.addEventListener('unload', () => {\n                    this.handleWindowClosed(win, onClose);\n                });\n            });\n        }\n        return win ?? undefined;\n    }\n\n    protected handleWindowClosed(win: Window, onClose?: (closedWin: Window) => void): void {\n        const extIndex = this.secondaryWindows.indexOf(win);\n        if (extIndex > -1) {\n            this.secondaryWindows.splice(extIndex, 1);\n        };\n        onClose?.(win);\n    }\n\n    focus(win: Window): void {\n        win.focus();\n    }\n\n    protected nextWindowId(): string {\n        return `${this.prefix}-secondaryWindow-${this.nextId++}`;\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, named } from 'inversify';\nimport { Event, Emitter } from '../../common';\nimport { CorePreferences } from '../core-preferences';\nimport { ContributionProvider } from '../../common/contribution-provider';\nimport { FrontendApplicationContribution, FrontendApplication, OnWillStopAction } from '../frontend-application';\nimport { WindowService } from './window-service';\nimport { DEFAULT_WINDOW_HASH } from '../../common/window';\nimport { confirmExit } from '../dialogs';\nimport { StopReason } from '../../common/frontend-application-state';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n    protected frontendApplication: FrontendApplication;\n    protected allowVetoes = true;\n\n    protected onUnloadEmitter = new Emitter<void>();\n    get onUnload(): Event<void> {\n        return this.onUnloadEmitter.event;\n    }\n\n    @inject(CorePreferences)\n    protected readonly corePreferences: CorePreferences;\n\n    @inject(ContributionProvider)\n    @named(FrontendApplicationContribution)\n    protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n    onStart(app: FrontendApplication): void {\n        this.frontendApplication = app;\n        this.registerUnloadListeners();\n    }\n\n    openNewWindow(url: string): undefined {\n        window.open(url, undefined, 'noopener');\n        return undefined;\n    }\n\n    openNewDefaultWindow(): void {\n        this.openNewWindow(`#${DEFAULT_WINDOW_HASH}`);\n    }\n\n    /**\n     * Returns a list of actions that {@link FrontendApplicationContribution}s would like to take before shutdown\n     * It is expected that this will succeed - i.e. return an empty array - at most once per session. If no vetoes are received\n     * during any cycle, no further checks will be made. In that case, shutdown should proceed unconditionally.\n     */\n    protected collectContributionUnloadVetoes(): OnWillStopAction[] {\n        const vetoes: OnWillStopAction[] = [];\n        if (this.allowVetoes) {\n            const shouldConfirmExit = this.corePreferences['application.confirmExit'];\n            for (const contribution of this.contributions.getContributions()) {\n                const veto = contribution.onWillStop?.(this.frontendApplication);\n                if (veto && shouldConfirmExit !== 'never') { // Ignore vetoes if we should not prompt the user on exit.\n                    if (OnWillStopAction.is(veto)) {\n                        vetoes.push(veto);\n                    } else {\n                        vetoes.push({ reason: 'No reason given', action: () => false });\n                    }\n                }\n            }\n            vetoes.sort((a, b) => (a.priority ?? -Infinity) - (b.priority ?? -Infinity));\n            if (vetoes.length === 0 && shouldConfirmExit === 'always') {\n                vetoes.push({ reason: 'application.confirmExit preference', action: () => confirmExit() });\n            }\n            if (vetoes.length === 0) {\n                this.allowVetoes = false;\n            }\n        }\n        return vetoes;\n    }\n\n    /**\n     * Implement the mechanism to detect unloading of the page.\n     */\n    protected registerUnloadListeners(): void {\n        window.addEventListener('beforeunload', event => this.handleBeforeUnloadEvent(event));\n        // In a browser, `unload` is correctly fired when the page unloads, unlike Electron.\n        // If `beforeunload` is cancelled, the user will be prompted to leave or stay.\n        // If the user stays, the page won't be unloaded, so `unload` is not fired.\n        // If the user leaves, the page will be unloaded, so `unload` is fired.\n        window.addEventListener('unload', () => this.onUnloadEmitter.fire());\n    }\n\n    async isSafeToShutDown(stopReason: StopReason): Promise<boolean> {\n        const vetoes = this.collectContributionUnloadVetoes();\n        if (vetoes.length === 0) {\n            return true;\n        }\n        const preparedValues = await Promise.all(vetoes.map(e => e.prepare?.(stopReason)));\n        console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));\n        for (let i = 0; i < vetoes.length; i++) {\n            try {\n                const result = await vetoes[i].action(preparedValues[i], stopReason);\n                if (!result) {\n                    return false;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        console.debug('OnWillStop actions resolved; allowing shutdown');\n        this.allowVetoes = false;\n        return true;\n    }\n\n    setSafeToShutDown(): void {\n        this.allowVetoes = false;\n    }\n\n    /**\n     * Called when the `window` is about to `unload` its resources.\n     * At this point, the `document` is still visible and the [`BeforeUnloadEvent`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event)\n     * event will be canceled if the return value of this method is `false`.\n     *\n     * In Electron, handleCloseRequestEvent is is run instead.\n     */\n    protected handleBeforeUnloadEvent(event: BeforeUnloadEvent): string | void {\n        const vetoes = this.collectContributionUnloadVetoes();\n        if (vetoes.length) {\n            // In the browser, we don't call the functions because this has to finish in a single tick, so we treat any desired action as a veto.\n            console.debug('Shutdown prevented by', vetoes.map(({ reason }) => reason).join(', '));\n            return this.preventUnload(event);\n        }\n        console.debug('Shutdown will proceed.');\n    }\n\n    /**\n     * Notify the browser that we do not want to unload.\n     *\n     * Notes:\n     *  - Shows a confirmation popup in browsers.\n     *  - Prevents the window from closing without confirmation in electron.\n     *\n     * @param event The beforeunload event\n     */\n    protected preventUnload(event: BeforeUnloadEvent): string | void {\n        event.returnValue = '';\n        event.preventDefault();\n        return '';\n    }\n\n    reload(): void {\n        this.isSafeToShutDown(StopReason.Reload).then(isSafe => {\n            if (isSafe) {\n                window.location.reload();\n            }\n        });\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2021 Ericsson and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/**\n * The window hash value that is used to spawn a new default window.\n */\nexport const DEFAULT_WINDOW_HASH: string = '!empty';\n\n/**\n * The options for opening new windows.\n */\nexport interface NewWindowOptions {\n    /**\n     * Controls whether the window should be opened externally.\n     */\n    readonly external?: boolean;\n}\n"],"names":[],"sourceRoot":""}